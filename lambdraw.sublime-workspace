{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"main",
				"mainLoadImage"
			],
			[
				"sortBy",
				"sortByY"
			],
			[
				"so",
				"sortByNextAcc"
			],
			[
				"star",
				"starDistance"
			],
			[
				"pic",
				"picPath"
			],
			[
				"Image",
				"ImageRGB8"
			],
			[
				"pi",
				"pixelungFromList"
			],
			[
				"P",
				"PixelRGB8"
			],
			[
				"Ima",
				"ImageRGB8"
			],
			[
				"mod",
				"module"
			],
			[
				"rgb",
				"rgb"
			],
			[
				"cmyk",
				"cmykPixls"
			],
			[
				"colo",
				"colorDistGrey"
			],
			[
				"old",
				"oldPix"
			],
			[
				"color",
				"colorDistGrey"
			],
			[
				"new",
				"newPix"
			],
			[
				"coloD",
				"colorDistGrew"
			],
			[
				"black",
				"blackPix"
			],
			[
				"wh",
				"whitePix"
			],
			[
				"unsa",
				"unsafeWritePixel"
			],
			[
				"Pi",
				"PixelRGB8"
			],
			[
				"olE",
				"oldPixE"
			],
			[
				"bas",
				"baseId"
			],
			[
				"Pixel",
				"PixelRGB8"
			],
			[
				"img",
				"imgVector"
			],
			[
				"pixe",
				"pixelung"
			],
			[
				"ne",
				"newPix"
			],
			[
				"n",
				"newPix"
			],
			[
				"uns",
				"unsafeReadPixel"
			],
			[
				"writ",
				"writeIdx"
			],
			[
				"Pix",
				"pixErr"
			],
			[
				"comp",
				"compwiseErr"
			],
			[
				"ol",
				"oldArr"
			],
			[
				"un",
				"unsafeReadPixel"
			],
			[
				"sa",
				"safeOldPix"
			],
			[
				"PI",
				"PixelRGB8"
			],
			[
				"find",
				"findErrPix"
			],
			[
				"pe",
				"pe"
			],
			[
				"we",
				"writeIdx"
			],
			[
				"Pixe",
				"PixelRGB8"
			],
			[
				"fin",
				"findErrPix"
			],
			[
				"base",
				"baseErF"
			],
			[
				"re",
				"readIdxLine"
			],
			[
				"write",
				"writeError"
			],
			[
				"St",
				"ST"
			],
			[
				"pix",
				"pixErr"
			],
			[
				"ST",
				"runST"
			],
			[
				"pah",
				"pathOut"
			],
			[
				"imag",
				"imageWidth"
			],
			[
				"im",
				"imgResizer"
			],
			[
				"cal",
				"calcAveragePix"
			],
			[
				"con",
				"conF"
			],
			[
				"nA",
				"nArry"
			],
			[
				"err",
				"errBases"
			],
			[
				"che",
				"checkopt"
			],
			[
				"ar",
				"args"
			],
			[
				"pa",
				"pathOut"
			],
			[
				"chec",
				"checkArgs"
			],
			[
				"calc",
				"calcErr"
			],
			[
				"mag",
				"magentaPix"
			],
			[
				"pixelung",
				"pixelunggrey"
			],
			[
				"E",
				"PixError"
			],
			[
				"add",
				"addWordError"
			],
			[
				"to",
				"toVal"
			],
			[
				"s",
				"sourceComponentCount"
			],
			[
				"arrX",
				"arrX"
			],
			[
				"res",
				"resPix"
			],
			[
				"pos",
				"posErrls"
			],
			[
				"Data",
				"data"
			],
			[
				"col",
				"colX"
			],
			[
				"line",
				"lineY"
			],
			[
				"vec",
				"vecSweep"
			],
			[
				"unsafe",
				"unsafeWritePixel"
			],
			[
				"arr",
				"arrXAcc"
			],
			[
				"erro",
				"errorCalc"
			],
			[
				"safe",
				"safeAddWord8"
			],
			[
				"diff",
				"diffPixel"
			],
			[
				"Word",
				"Word8"
			],
			[
				"dither",
				"ditherFloydRGB8"
			],
			[
				"map",
				"pixelMap"
			],
			[
				"pro",
				"promoteImage"
			],
			[
				"fr",
				"from16to8"
			],
			[
				"dyn",
				"dyn2rgb8"
			],
			[
				"ImageY",
				"ImageYCbCr8"
			],
			[
				"Im",
				"ImageYA8"
			],
			[
				"path",
				"pathOut"
			],
			[
				"p",
				"processImage"
			],
			[
				"pat",
				"pathIn"
			],
			[
				"pall",
				"colorPallette"
			],
			[
				"pal",
				"palPixelung"
			],
			[
				"der",
				"deriving"
			],
			[
				"pixelun",
				"pixelungrot"
			],
			[
				"cv8",
				"cv8toCV"
			],
			[
				"v",
				"v"
			],
			[
				"sum",
				"sumbyAcc"
			],
			[
				"st",
				"static"
			],
			[
				"pxs",
				"pxs"
			],
			[
				"Colo",
				"ColorVal"
			],
			[
				"Dista",
				"Distance"
			],
			[
				"var",
				"varCVs"
			],
			[
				"Color",
				"ColorVal8"
			],
			[
				"pixl",
				"pixlCVmap"
			],
			[
				"draw",
				"drawHeight"
			],
			[
				"get",
				"getPixCoords"
			],
			[
				"I",
				"ImgMax"
			],
			[
				"max",
				"maxColorDistAcc"
			],
			[
				"bl",
				"bluePix"
			],
			[
				"w",
				"whitePix"
			],
			[
				"cv",
				"cv8toCV"
			],
			[
				"cvC",
				"cvCount"
			],
			[
				"cvc",
				"cvCountUp"
			],
			[
				"Cv",
				"CVCount"
			],
			[
				"cvCo",
				"cvCountUp"
			],
			[
				"CV",
				"CVCount"
			],
			[
				"count",
				"countMostCommonCV"
			],
			[
				"CVCou",
				"CVCount"
			],
			[
				"pixt",
				"pixtoCVAcc"
			],
			[
				"dist",
				"colorDist8"
			],
			[
				"CVN",
				"CVNope"
			],
			[
				"Col",
				"ColorVal"
			],
			[
				"C",
				"CVNope"
			],
			[
				"arra",
				"arrRadLs"
			],
			[
				"arrH",
				"arrHls"
			],
			[
				"arrRad",
				"arrRadLs"
			],
			[
				"from",
				"fromIntegral"
			],
			[
				"load",
				"loadPng"
			],
			[
				"per",
				"periphHelpls"
			],
			[
				"Arr",
				"ArrHelperXY"
			]
		]
	},
	"buffers":
	[
		{
			"file": "loadImage.hs",
			"settings":
			{
				"buffer_size": 4570,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Resize.hs",
			"settings":
			{
				"buffer_size": 6825,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "module Dither where \n\nimport           MakeIMG\n\nimport           Data.Vector          (Vector, (!))\nimport qualified Data.Vector.Storable as VS\nimport           Codec.Picture.Types\nimport           Control.Monad( foldM, liftM, ap )\nimport           Control.Monad.ST as ST\nimport           Control.Monad.Primitive ( PrimMonad, PrimState )\nimport           Data.Bits( unsafeShiftL, unsafeShiftR, (.|.), (.&.),shiftR )\nimport           Data.Word( Word8, Word16, Word32, Word64 )\nimport qualified Data.Vector.Storable.Mutable as M\nimport           Data.Maybe\n\n-- operation to drop used colors to a list of colors\nnoDither :: [PixelRGB8] -> PixelRGB8 -> PixelRGB8\nnoDither ls p = colorMinDist p ls\n\n-------------------------------------------------------------------------------\n----            Dithering\n-------------------------------------------------------------------------------\n\n-- calculates the difference between two pixels\n-- saves values as Int so negative values can be saved \nsubtPixel :: PixelRGB8 -> PixelRGB8 -> PixError\nsubtPixel (PixelRGB8 r1 g1 b1) (PixelRGB8 r2 g2 b2) = PixError r' g' b'\n    where\n    r' = fromIntegral r1 - fromIntegral r2\n    g' = fromIntegral g1 - fromIntegral g2\n    b' = fromIntegral b1 - fromIntegral b2\n\n-- takes a pixel and a palette (= list of pixels)\n-- returns the perceived closest pixel from the palette\ncolorMinDist :: PixelRGB8 -> [PixelRGB8] -> PixelRGB8\ncolorMinDist p []     = PixelRGB8 255 255 255\ncolorMinDist p (x:xs) = colorMinDistAcc p xs ((colorDist8 p x),x) \n    where\n    colorMinDistAcc :: PixelRGB8 -> [PixelRGB8] -> (Distance,PixelRGB8) -> PixelRGB8\n    colorMinDistAcc p []     (_   ,pixAcc)    = pixAcc\n    colorMinDistAcc p (x:xs) (dist,pixAcc)\n        | dist' < dist = colorMinDistAcc p xs (dist',x)\n        | otherwise    = colorMinDistAcc p xs (dist ,pixAcc)\n        where\n        dist' = colorDist8 p x \n\ncolorDistGrey :: PixelRGB8 -> PixelRGB8\ncolorDistGrey (PixelRGB8 g1 g2 g3)\n                      | (and [g1==g2,g1==g3,g1>= 123]) = whitePix\n                      | otherwise = blackPix\n\n-- calculates perceived color-distance between two pixels\n-- Source for function: http://www.compuphase.com/cmetric.htm\ncolorDist8 :: PixelRGB8 -> PixelRGB8 -> Distance\ncolorDist8 (PixelRGB8 r1 g1 b1) (PixelRGB8 r2 g2 b2) = sqrt $ (2 + r'/256)   * dr^2 \n                                                            +  4             * dg^2 \n                                                            + (2+(255-r'/256)* db^2)\n-- colorDist8 (PixelRGB8 r1 g1 b1) (PixelRGB8 r2 g2 b2) = sqrt $ dr^2 \n--                                                             + dg^2 \n--                                                             + db^2\n    where\n    r' = (fromIntegral r1)/2 + (fromIntegral r2)/2\n    dr = fromIntegral r1 - fromIntegral r2\n    dg = fromIntegral g1 - fromIntegral g2\n    db = fromIntegral b1 - fromIntegral b2\n\n-- simple euclidian Distance between two pixels\ncolorDistEuclid ::  PixelRGB8 -> PixelRGB8 -> Distance\ncolorDistEuclid (PixelRGB8 r1 g1 b1) (PixelRGB8 r2 g2 b2) = sqrt $ dr^2  + dg^2 + db^2\n    where\n    r' = (fromIntegral r1)/2 + (fromIntegral r2)/2\n    dr = fromIntegral r1 - fromIntegral r2\n    dg = fromIntegral g1 - fromIntegral g2\n    db = fromIntegral b1 - fromIntegral b2\n\n-- used to calculate Neighbour-Points\naddTupel :: Num a => (a,a) -> (a,a) -> (a,a)\naddTupel (x1,x2) (y1,y2) = (x1 + y1, x2 + y2)\n\n-- Floyd-Steinberg Algorithm for a Palette (= [PixelRGB8]) and an Image PixelRGB8\nditherFloydRGB8 :: [PixelRGB8] -> Image PixelRGB8 -> Image PixelRGB8\nditherFloydRGB8 []   img                               = img \nditherFloydRGB8 pxls img@(Image { imageWidth  = w, \n                           imageHeight = h, \n                           imageData   = vec }) =\n  Image w h pixels\n    where sourceCompCount    = componentCount (undefined :: PixelRGB8)\n          destComponentCount = componentCount (undefined :: PixelRGB8)\n\n          pixels = runST $ do\n            oldArr <- VS.thaw vec \n            --newArr <- M.new (w * h * sourceCompCount)\n            let lineMapper _ _ y | y >= h = return ()\n                lineMapper readIdxLine writeIdxLine y = colMapper readIdxLine writeIdxLine 0 \n                  where colMapper readIdx writeIdx x\n                            | x >= w    = lineMapper readIdx writeIdx $ y + 1\n                            | otherwise = do\n                                oldPix <- unsafeReadPixel' oldArr readIdx\n                                newPix <- return $ colorMinDist oldPix pxls \n                                unsafeWritePixel oldArr writeIdx newPix\n                                errPix <- return $ subtPixel oldPix newPix                              \n                                unsafeWritePixel' oldArr [(7,(1,0)),(3,((-1),1)),(5,(0,1)),(1,(1,1))] errPix\n                                colMapper (readIdx  + sourceCompCount)\n                                          (writeIdx + destComponentCount)\n                                          (x + 1)\n                                    where\n                                    -- Still needed as it only works with RGB8 Pixels uptil now\n                                    unsafeReadPixel' :: PrimMonad m => M.STVector (PrimState m) (PixelBaseComponent PixelRGB8) -> Int -> m PixelRGB8\n                                    unsafeReadPixel' vec idx =\n                                            PixelRGB8 `liftM` M.unsafeRead vec idx\n                                                      `ap`    M.unsafeRead vec (idx + 1)\n                                                      `ap`    M.unsafeRead vec (idx + 2)\n                                    -- Takes a List of Error Factors and Neighbours (Int,(Int,Int)) and shares the Error\n                                    unsafeWritePixel' v []       _  = return ()\n                                    unsafeWritePixel' v (eb:ebs) pe =  do if mbaseE == Nothing \n                                                                            then do unsafeWritePixel' v ebs pe\n                                                                            else do oldPixE <- unsafeReadPixel' oldArr baseE \n                                                                                    unsafeWritePixel v baseE $ newPixE (fst eb) oldPixE\n                                                                                    unsafeWritePixel' v ebs pe\n                                                                          where\n                                                                          newPixE fac ol = compwiseErr fac pe ol\n                                                                          baseE          = fromJust mbaseE\n                                                                          mbaseE         = baseId $ addTupel (x,y) $ snd eb \n                                    -- calculates the BaseId for any given Point in the Image (checks bounds)\n                                    baseId :: Point -> Maybe Int\n                                    baseId (a,b)\n                                        | a <  0    = Nothing\n                                        | a >= w    = Nothing\n                                        | b >= h    = Nothing\n                                        | otherwise = Just $ (a + b * w) * sourceCompCount\n                                    -- adds the Error to a given Pixel with the corresponding Factor\n                                    compwiseErr :: Int -> PixError -> PixelRGB8 -> PixelRGB8\n                                    compwiseErr fac (PixError r' g' b') (PixelRGB8 r g b) = PixelRGB8 (calcErr r r') (calcErr g g') (calcErr b b')\n                                      where\n                                      calcErr :: Pixel8 -> Int -> Pixel8\n                                      calcErr p' e'\n                                                | res <= 0   = 0\n                                                | res >= 255 = 255\n                                                | otherwise  = fromIntegral res\n                                                where res = fromIntegral p' + ((fac*(fromIntegral e') `shiftR` 4))\n\n\n            lineMapper 0 0 0\n\n            -- unsafeFreeze avoids making a second copy and it will be\n            -- safe because newArray can't be referenced as a mutable array\n            -- outside of this where block\n            VS.unsafeFreeze oldArr\n\n                                    \n-- -- Floyd-Steinberg Algorithm for a Palette (= [PixelRGB8]) and an Image PixelRGB8\n-- ditherFloydRGB8old :: [PixelRGB8] -> Image PixelRGB8 -> Image PixelRGB8\n-- ditherFloydRGB8old [] img = img\n-- ditherFloydRGB8old ls img@(Image { imageWidth  = w, \n--                                 imageHeight = h, \n--                                 imageData   = vec }) =\n--   Image w h vecSweep\n--     where \n--     compCount = componentCount (undefined :: PixelRGB8)\n--     vecSweep = lineSweep vec 0 0\n--     lineSweep arrY lineX y -- sweep lines 0 to h\n--       | y >= h = arrY\n--       | otherwise  = colSweep arrY lineX\n--       where \n--       colSweep arrX x -- sweep columns 0 to w\n--         | x >= w  = lineSweep arrX 0 (y+1)\n--         | otherwise  = colSweep (dither arrX) (x+1)\n--         where \n--         dither arrD = arrD VS.// updateVals (findPix ls) errBases []\n--         -- calculate indices where a pixel starts (= base) and check for bounds\n--         baseId :: Point -> Maybe BasID\n--         baseId (a,b)\n--             | a <  0    = Nothing\n--             | a >= w    = Nothing\n--             | b >= h    = Nothing\n--             | otherwise = Just $ (a + b * w) * compCount\n--         -- base of pixel of the current point (x,y)\n--         baseA :: BasID\n--         baseA = (x + y * w) * compCount\n--         -- calculate closest color from palette and pixError for current pixel\n--         findPix :: [PixelRGB8] -> (PixelRGB8, PixError)\n--         findPix pxls = (newPix,pixErr)\n--           where \n--           newPix = colorMinDist oldPix pxls\n--           oldPix = unsafePixelAt arrX baseA\n--           pixErr = subtPixel oldPix newPix\n--         -- calculate error distribution bases\n--         errBases :: [(ErrorFac, Maybe BasID)]\n--         errBases         = [(7,(baseId (x+1,y  )))\n--                            ,(3,(baseId (x-1,y+1)))\n--                            ,(5,(baseId (x  ,y+1)))\n--                            ,(1,(baseId (x+1,y+1)))]\n--         -- calculate list of updates for //-operator\n--         updateVals :: (PixelRGB8,PixError) -> [(ErrorFac, Maybe BasID)] -> [(BasID,Word8)] -> [(BasID,Word8)]\n--         updateVals   ((PixelRGB8 rn gn bn),_  ) []     acc = (baseA,rn):(baseA+1,gn):(baseA+2,bn):acc\n--         updateVals v@(p                   ,err) (x:xs) acc = (shareError x err) ++ (updateVals v xs acc)\n--           where\n--           shareError (fac, Nothing   ) (PixError r' g' b')= []\n--           shareError (fac,(Just base)) (PixError r' g' b')= addError oldPix'\n--             where\n--             oldPix' = unsafePixelAt arrX base\n--             addError (PixelRGB8 r g b) = [(base,(calcErr r r')),(base+1,(calcErr g g')),(base+2,(calcErr b b'))]\n--             calcErr :: Word8 -> Int -> Word8\n--             calcErr p' e'\n--                     | res <= 0   = 0\n--                     | res >= 255 = 255\n--                     | otherwise  = fromIntegral res\n--                     where res = fromIntegral p' + ((fac*(fromIntegral e') `shiftR` 4))\n\n\n\n\n\n\n\n",
			"file": "Dither.hs",
			"file_size": 11467,
			"file_write_time": 130684693460000000,
			"settings":
			{
				"buffer_size": 11467,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Colorsplicer.hs",
			"settings":
			{
				"buffer_size": 6634,
				"line_ending": "Unix"
			}
		},
		{
			"file": "LambDraw.hs",
			"settings":
			{
				"buffer_size": 2220,
				"line_ending": "Unix"
			}
		},
		{
			"file": "makeimg.hs",
			"settings":
			{
				"buffer_size": 1846,
				"line_ending": "Unix"
			}
		},
		{
			"file": "archive.hs",
			"settings":
			{
				"buffer_size": 18552,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"pro",
				"Project: Add Folder"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"instal",
				"SublimeHaskell: Install"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Package Control: Remove Package"
			],
			[
				"git pus",
				"Git (SideBarGit): Push"
			],
			[
				"git",
				"Git (SideBarGit): Commit…"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"Disc",
				"Package Control: Discover Packages"
			],
			[
				"List Packages",
				"Package Control: List Packages"
			],
			[
				"Pack",
				"Package Control: Install Package"
			],
			[
				"Packag",
				"Preferences: Browse Packages"
			],
			[
				"haskell",
				"Set Syntax: Haskell"
			]
		],
		"width": 746.0
	},
	"console":
	{
		"height": 153.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/clem/Dropbox/LMU/FUN/LambDraw"
	],
	"file_history":
	[
		"/Users/clem/Dropbox/LMU/FUN/LambDraw/ToolpathNext.prof",
		"/Users/clem/Dropbox/LMU/FUN/LambDraw/ToolpathStar100.prof",
		"/Users/clem/Dropbox/LMU/FUN/LambDraw/Toolpath.prof",
		"/Users/clem/Dropbox/LMU/FUN/LambDraw/Toolpath.hs",
		"/Users/clem/Dropbox/LMU/FUN/LambDraw/ToolpathStar300.prof",
		"/Users/clem/Dropbox/LMU/FUN/LambDraw/ToolpathMathmindist100.prof",
		"/Users/clem/Dropbox/LMU/FUN/LambDraw/Dither.hs",
		"/Users/clem/Dropbox/LMU/FUN/LambDraw/Colorsplicer.hs",
		"/Users/clem/Dropbox/LMU/FUN/LambDraw/MakeIMG.hs",
		"/Users/clem/Dropbox/LMU/FUN/LambDraw/makeimg.hs",
		"/Users/clem/Dropbox/LMU/FUN/LambDraw/ditherRacePiem1.prof",
		"/Users/clem/Dropbox/LMU/FUN/LambDraw/ditherRace1.prof",
		"/Users/clem/Dropbox/LMU/FUN/LambDraw/pixeld.hs",
		"/Users/clem/Dropbox/LMU/FUN/LambDraw/ditherRaceResults.prof",
		"/Users/clem/Dropbox/LMU/FUN/LambDraw/ditherRace1ST.prof",
		"/Users/clem/Dropbox/LMU/FUN/archiv/colorquant.hs",
		"/Users/clem/Dropbox/LMU/FUN/LambDraw/Bither.hs",
		"/Users/clem/Dropbox/LMU/FUN/LambDraw/stmonad.hs",
		"/Users/clem/Dropbox/LMU/FUN/LambDraw/Resize.hs",
		"/Users/clem/Dropbox/LMU/FUN/LambDraw/ErrDither.hs",
		"/Users/clem/Dropbox/LMU/FUN/uebung/stmexample.hs",
		"/Users/clem/Dropbox/LMU/FUN/LambDraw/images/dither1.png",
		"/Users/clem/Dropbox/LMU/FUN/LambDraw/Dither.sublime-project",
		"/Users/clem/Dropbox/LMU/FUN/ffp-project/.git/info/exclude",
		"/Users/clem/Dropbox/LMU/FUN/archiv/shortestalgorithm.hs",
		"/Users/clem/Dropbox/LMU/FUN/ffp-project/Graphicsimport.hs",
		"/Users/clem/Dropbox/LMU/FUN/ffp-project/graphicsimport.hs",
		"/Users/clem/Dropbox/LMU/FUN/ffp-project/makeimg.hs",
		"/Users/clem/Library/Application Support/Sublime Text 3/Packages/SideBarEnhancements/Side Bar.sublime-settings",
		"/Users/clem/Library/Application Support/Sublime Text 3/Packages/User/Side Bar.sublime-settings",
		"/Users/clem/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/clem/Library/Application Support/Sublime Text 3/Packages/User/Package Control.sublime-settings",
		"/Users/clem/Dropbox/LMU/FUN/archiv/makeimg.hs",
		"/Users/clem/Dropbox/LMU/FUN/project/dither.hs",
		"/Users/clem/Dropbox/LMU/FUN/project/shortestalgorithm.hs",
		"/Users/clem/Dropbox/LMU/FUN/project/colorquant.hs",
		"/Users/clem/Downloads/leptonica-1.71/src/colorquant2.c",
		"/Users/clem/Downloads/FFP_Code10/helloWorld3.hs",
		"/Users/clem/Dropbox/LMU/FUN/project/b)",
		"/Users/clem/Dropbox/LMU/FUN/uebung/ub10.hs",
		"/Users/clem/Dropbox/LMU/FUN/project/trash.hs",
		"/Users/clem/Dropbox/LMU/TutorJob BS/blatt12.java",
		"/Users/clem/Dropbox/LMU/TutorJob BS/KorrekturschemaBlatt10.txt",
		"/Users/clem/Dropbox/LMU/FUN/project/middle.hs",
		"/Users/clem/Dropbox/LMU/FUN/project/makeimg.hs",
		"/Users/clem/Dropbox/LMU/FUN/niemeyer_zeichenmaschine.txt",
		"/Users/clem/Downloads/Red Alert 2.app/Contents/Resources/drive_c/Program Files/Alarmstufe rot2/RA2.INI",
		"/Users/clem/Library/Application Support/Sublime Text 3/Packages/User/Default (OSX).sublime-keymap",
		"/Users/clem/Dropbox/LMU/FUN/uebung/FFP_U09_STM.hs",
		"/Users/clem/Dropbox/LMU/FUN/project/pngtest.hs",
		"/Users/clem/Dropbox/LMU/FUN/project/pixelcompare.hs",
		"/Users/clem/Dropbox/LMU/FUN/project/shortestpoint.hs",
		"/Users/clem/Downloads/FFP_U09_STM.hs",
		"/usr/local/share/cmake-3.0/Modules/FindDevIL.cmake",
		"/Users/clem/Dropbox/LMU/FUN/images/canvas2.ppm",
		"/Users/clem/Dropbox/LMU/FUN/canvas3.ppm",
		"/Users/clem/Dropbox/LMU/FUN/canvas.ppm",
		"/Users/clem/Documents/sysprak/Beispielimplementierung/checkprime.c",
		"/Users/clem/Documents/sysprak/Beispielimplementierung/findMaxOfFloats.c",
		"/Users/clem/Documents/sysprak/Own/zweipro.c",
		"/Users/clem/Dropbox/LMU/FUN/canvas2.ppm",
		"/Users/clem/Desktop/canvas.ppm",
		"/Users/clem/Dropbox/LMU/FUN/imagetest.hs",
		"/Users/clem/Library/Haskell/repo-cache/hackage.haskell.org/repa-examples/3.3.1.1/repa-examples-3.3.1.1/examples/Blur/src-repa/Main.hs",
		"/Users/clem/Library/Haskell/repo-cache/hackage.haskell.org/repa-examples/3.3.1.1/repa-examples-3.3.1.1/examples/UnitTesting/UnitTesting.hs",
		"/Users/clem/Dropbox/LMU/FUN/ub7.hs",
		"/Users/clem/Documents/sysprak/supermuehle/build/client.conf",
		"/Users/clem/Downloads/table.html",
		"/Users/clem/Downloads/FFP_U07_Parallel.hs",
		"/Users/clem/Dropbox/LMU/FUN/parsing.hs",
		"/Users/clem/Dropbox/LMU/FUN/parser.h",
		"/Users/clem/Documents/sysprak/Own/read.c",
		"/Users/clem/Documents/sysprak/Own/buffer.txt",
		"/Users/clem/Documents/sysprak/Own/namen.txt",
		"/Users/clem/Documents/sysprak/Own/multiproc.c",
		"/Users/clem/Dropbox/LMU/TutorJob BS/pipetest.c",
		"/Users/clem/Downloads/wavedrom.svg",
		"/Users/clem/Dropbox/LMU/Seminar TUM/wavedrom_pwm.txt",
		"/Users/clem/Dropbox/LMU/TutorJob BS/korrekturschema6.txt",
		"/Users/clem/Documents/sysprak/Beispielimplementierung/chat.c",
		"/Users/clem/Documents/sysprak/Beispielimplementierung/checkPrimeMultiThreaded/checkPrimeMultiThreaded.c",
		"/Users/clem/Dropbox/LMU/TutorJob BS/BS Uebung 11.11.",
		"/Users/clem/Downloads/SoftwareServo/SoftwareServo.h",
		"/Users/clem/Downloads/SoftwareServo/SoftwareServo.cpp",
		"/Users/clem/Documents/sysprak/Beispielimplementierung/gameOfLife.c",
		"/Users/clem/.ghc/ghci.conf",
		"/Users/clem/.ghc/test.hs",
		"/Users/clem/Downloads/FFP_U02_Typklassen.hs",
		"/Users/clem/test.hs",
		"/Users/clem/edx1.hs",
		"/Users/clem/Downloads/FFP_U01wiederholung.hs",
		"/Users/clem/Documents/sysprak/Own/rrr.txt",
		"/Users/clem/Documents/sysprak/Own/readfile.c",
		"/Users/clem/Documents/sysprak/Own/star.c",
		"/Users/clem/Downloads/Beispielimplementierung/findMaxOfFloats.c",
		"/Users/clem/Downloads/Beispielimplementierung/matrixMult.c",
		"/Users/clem/Downloads/main.c",
		"/Users/clem/Downloads/solarus-alttp-pack-master/README.md",
		"/Users/clem/Documents/Solaris/Test/data/quest.dat",
		"/Users/clem/Downloads/solarus-1.3.1/src/third_party/snes_spc/SNES_SPC_misc.cpp",
		"/Users/clem/Downloads/solarus-1.3.1/src/main/Main.cpp",
		"/Users/clem/Downloads/solarus-1.2-OSX/sample_quest/data/main.lua",
		"/Users/clem/Documents/Loesung3.pdf"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"(0,0)",
			"plusPair",
			"show",
			"imgConverter",
			"from16to8",
			"toRGB8",
			"= ",
			"imgyn2rgb8",
			"d",
			"dyn2string",
			"\"\"",
			"putStrLn",
			"reprRgb8",
			"diDimensions",
			"imgDimensions d",
			"imgDimensions",
			"false",
			"generat",
			"L.",
			"foral",
			"mod y 10",
			"y",
			"pixelLines x",
			"(x*51)",
			"x*51",
			"save",
			"Int",
			"trun",
			"pixelung8rot",
			"arrToPoints",
			"arrRadLs",
			"periphPix",
			"image",
			"imageWidt",
			"imagWidt",
			"pixelung8rot",
			"fertig",
			"21753",
			"21744",
			"21752",
			"21751",
			"21749",
			"(A·B)"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"P4",
			"PP",
			"P3",
			"P2",
			"P1",
			"21753",
			"((A NAND B) NAND (A NAND B))"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": false
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "loadImage.hs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4570,
						"regions":
						{
						},
						"selection":
						[
							[
								2860,
								2860
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/SublimeHaskell/Syntaxes/Haskell-SublimeHaskell.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Resize.hs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6825,
						"regions":
						{
						},
						"selection":
						[
							[
								674,
								674
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/SublimeHaskell/Syntaxes/Haskell-SublimeHaskell.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Dither.hs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11467,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/SublimeHaskell/Syntaxes/Haskell-SublimeHaskell.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1254.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Colorsplicer.hs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6634,
						"regions":
						{
						},
						"selection":
						[
							[
								1944,
								1944
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/SublimeHaskell/Syntaxes/Haskell-SublimeHaskell.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 237.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "LambDraw.hs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2220,
						"regions":
						{
						},
						"selection":
						[
							[
								397,
								397
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/Haskell/Haskell.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 5,
					"file": "makeimg.hs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1846,
						"regions":
						{
						},
						"selection":
						[
							[
								710,
								710
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/SublimeHaskell/Syntaxes/Haskell-SublimeHaskell.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "archive.hs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18552,
						"regions":
						{
						},
						"selection":
						[
							[
								8332,
								8104
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/Haskell/Haskell.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10217.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 35.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.683087749734,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.haskell_sublime_load":
	{
		"height": 29.0
	},
	"project": "lambdraw.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 220.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
